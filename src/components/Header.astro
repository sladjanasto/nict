---
import { getUITranslations, getLangFromUrl, getLanguageSwitchUrls } from '../utils/i18n.ts';

const { url } = Astro;
const lang = getLangFromUrl(url);
const ui = await getUITranslations(lang);
const languageSwitchUrls = getLanguageSwitchUrls(url.pathname) || [];
---

<header class="header" transition:persist>
	<div class="container">
		<nav class="navbar">
			<div class="nav-brand">
				<a href="/" class="logo">
					<img src="/NICT_logo_color2.png" alt="N-ICT - drop IT on us" class="logo-img" />
				</a>
			</div>
			
			<div class="nav-menu" id="nav-menu">
				<ul class="nav-list">
					<li class="nav-item">
						<a href="#home" class="nav-link">
							<i class="icon icon-home"></i>
							<span class="nav-text">{ui.nav.home}</span>
						</a>
					</li>
					<li class="nav-item">
						<a href="#services" class="nav-link">
							<i class="icon icon-cogs"></i>
							<span class="nav-text">{ui.nav.services}</span>
						</a>
					</li>
					<li class="nav-item">
						<a href="#about" class="nav-link">
							<i class="icon icon-user-tie"></i>
							<span class="nav-text">{ui.nav.about}</span>
						</a>
					</li>
				</ul>
				
				<div class="nav-actions">
					<!-- Options Menu -->
					<div class="options-menu">
						<button 
							class="options-toggle" 
							aria-label="More options"
							aria-expanded="false"
							aria-haspopup="true"
							type="button"
						>
							<span class="options-icon" aria-hidden="true">‚ãÆ</span>
						</button>
						<div class="options-dropdown" role="menu">
							<div class="options-item" role="menuitem">
								<span class="option-label">Theme</span>
								<button 
									class="theme-toggle" 
									aria-label="Toggle dark theme"
									type="button"
								>
									<span class="theme-icon" aria-hidden="true">üåô</span>
								</button>
							</div>
							<div class="options-item" role="menuitem">
								<span class="option-label">Language</span>
								<div class="language-switcher">
									<select 
										id="language-select" 
										class="lang-select"
										aria-label="Select language"
									>
										{languageSwitchUrls.map(({ lang: switchLang, label, url }) => (
											<option value={url} selected={switchLang === lang}>
												{label}
											</option>
										))}
									</select>
								</div>
							</div>
						</div>
					</div>
					
					<a href="#contact" class="btn nav-cta">
						<i class="icon icon-bubbles4"></i>
						<span class="nav-text">{ui.buttons.freeConsultation}</span>
					</a>
				</div>
			</div>
		</nav>
	</div>
</header>

<style>
	.header {
		background: var(--bg-primary);
		box-shadow: var(--shadow-md);
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		z-index: 9999; /* Increased z-index for View Transitions compatibility */
		backdrop-filter: blur(10px);
		transform: translateY(0);
		transition: transform 0.3s ease-in-out;
		/* Ensure header stays visible during View Transitions */
		view-transition-name: site-header;
	}
	
	.header.header-hidden {
		transform: translateY(-100%);
	}
	
	.navbar {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 0.25rem 0;
	}
	
	.nav-brand .logo {
		display: flex;
		align-items: center;
		text-decoration: none;
		color: var(--text-dark);
		font-weight: 700;
		font-size: var(--font-size-xl);
		outline: none;
		border: none;
	}
	
	.nav-brand .logo:focus {
		outline: none;
		border: none;
	}
	
	.logo-img {
		height: 90px;
		width: auto;
		object-fit: contain;
		border: none;
		outline: none;
	}
	
	.nav-menu {
		display: flex;
		align-items: center;
		gap: var(--spacing-md);
	}
	
	.nav-link {
		display: flex;
		align-items: center;
		gap: var(--spacing-xs);
		text-decoration: none;
		color: var(--text-primary);
		font-weight: 500;
		padding: var(--spacing-sm) var(--spacing-md);
		border-radius: var(--radius-sm);
		transition: all var(--transition-fast);
	}
	
	.nav-link:hover {
		background: var(--bg-primary);
		color: #1d96d5;
	}
	
	.nav-link .icon {
		font-size: var(--font-size-md);
		line-height: 1;
	}
	
	.nav-actions {
		display: flex;
		align-items: center;
		gap: var(--spacing-sm);
	}
	
	/* Options Menu Styles */
	.options-menu {
		position: relative;
		display: flex;
		align-items: center;
	}
	
	.options-toggle {
		background: var(--bg-primary);
		border: 1px solid var(--border-color);
		border-radius: 8px;
		padding: 0.5rem;
		cursor: pointer;
		transition: all var(--transition-normal);
		display: flex;
		align-items: center;
		justify-content: center;
		width: 36px;
		height: 36px;
	}
	
	.options-toggle:hover {
		border-color: var(--primary-color);
		background: var(--bg-secondary);
	}
	
	.options-icon {
		font-size: 18px;
		color: var(--text-dark);
		font-weight: bold;
		line-height: 1;
	}
	
	.options-dropdown {
		position: absolute;
		top: calc(100% + 8px);
		right: 0;
		background: var(--bg-primary); /* Fixed: use consistent background variable */
		border: 1px solid var(--text-light);
		border-radius: 12px;
		box-shadow: var(--shadow-lg);
		padding: var(--spacing-sm);
		min-width: 200px;
		opacity: 0;
		visibility: hidden;
		transform: translateY(-10px) scale(0.95);
		transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
		z-index: 10000; /* Higher z-index for dropdown */
		backdrop-filter: blur(8px);
		/* Ensure dropdown persists during View Transitions */
		view-transition-name: options-dropdown;
	}
	
	.options-menu.active .options-dropdown {
		opacity: 1;
		visibility: visible;
		transform: translateY(0) scale(1);
	}
	
	.options-item {
		display: flex;
		align-items: center;
		justify-content: space-between;
		padding: var(--spacing-sm);
		border-radius: 8px;
		transition: background-color var(--transition-normal);
	}
	
	.options-item:hover {
		background: var(--bg-secondary);
	}
	
	.options-item:not(:last-child) {
		border-bottom: 1px solid var(--border-light);
		margin-bottom: var(--spacing-xs);
		padding-bottom: var(--spacing-sm);
	}
	
	.option-label {
		font-family: 'Poppins', sans-serif;
		font-size: var(--font-size-sm);
		font-weight: 500;
		color: var(--text-dark);
	}
	
	.language-switcher {
		position: relative;
	}
	
	.options-item .lang-select {
		background: var(--bg-primary);
		border: 1px solid var(--border-color);
		border-radius: 6px;
		padding: 0.25rem 0.5rem;
		font-family: 'Poppins', sans-serif;
		font-size: var(--font-size-xs);
		color: var(--text-dark);
		cursor: pointer;
		transition: all var(--transition-normal);
		outline: none;
		min-width: 80px;
	}
	
	.options-item .lang-select:hover {
		border-color: var(--primary-color);
	}
	
	.options-item .lang-select:focus {
		border-color: var(--primary-color);
		box-shadow: 0 0 0 2px rgba(26, 234, 226, 0.1);
	}
	
	.options-item .theme-toggle {
		background: var(--bg-primary);
		border: 1px solid var(--border-color);
		border-radius: 6px;
		padding: 0.25rem 0.5rem;
		cursor: pointer;
		transition: all var(--transition-normal);
		display: flex;
		align-items: center;
		justify-content: center;
		min-width: 40px;
		height: 32px;
		position: relative;
		overflow: hidden;
	}
	
	.options-item .theme-toggle:hover {
		border-color: var(--primary-color);
		background: var(--bg-secondary);
		transform: scale(1.05);
	}
	
	.options-item .theme-toggle:active {
		transform: scale(0.98);
	}
	
	.theme-icon {
		font-size: 14px;
		transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
	}
	
	/* Add a subtle animation when theme changes */
	.options-item .theme-toggle:focus {
		outline: 2px solid var(--primary-color);
		outline-offset: 2px;
	}
	
	.nav-list {
		display: flex;
		list-style: none;
		gap: var(--spacing-md);
		margin: 0;
	}
	
	.nav-link {
		text-decoration: none;
		color: var(--text-dark);
		font-family: 'Poppins', sans-serif;
		font-weight: 300;
		font-size: var(--font-size-base);
		transition: color var(--transition-normal);
		position: relative;
	}
	
	.nav-link:hover {
		color: var(--primary-color);
	}
	
	.nav-link::after {
		content: '';
		position: absolute;
		bottom: -5px;
		left: 0;
		width: 0;
		height: 2px;
		background: var(--bg-gradient);
		transition: width var(--transition-normal);
	}
	
	.nav-link:hover::after {
		width: 100%;
	}
	
	.nav-cta {
		font-size: var(--font-size-xs);
		font-family: 'Poppins', sans-serif;
		font-weight: 500;
		padding: var(--spacing-xs) var(--spacing-sm);
		background: var(--bg-gradient);
		color: white;
		text-decoration: none;
		border-radius: 6px;
		border: none;
		outline: none;
		transition: all var(--transition-normal);
		box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
		min-width: auto;
		white-space: nowrap;
	}
	
	.theme-toggle {
		background: none;
		border: none;
		font-size: 1.2rem;
		cursor: pointer;
		padding: 0.5rem;
		border-radius: 50%;
		display: flex;
		align-items: center;
		justify-content: center;
		transition: all var(--transition-normal);
		color: var(--text-dark);
	}
	
	.theme-toggle:hover {
		background: rgba(26, 234, 226, 0.1);
		transform: scale(1.1);
	}
	
	[data-theme="dark"] .theme-toggle .theme-icon::before {
		content: "‚òÄÔ∏è";
	}
	
	[data-theme="light"] .theme-toggle .theme-icon::before {
		content: "üåô";
	}
	
	.theme-icon {
		display: block;
	}
	
	.theme-icon::before {
		content: "üåô";
	}
	
	.nav-cta:hover {
		transform: translateY(-2px);
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
		color: white;
	}
	
	
	.nav-toggle {
		display: none;
	}
	
	.bar {
		display: none;
	}
	
	/* Tablet Styles */
	@media (min-width: 769px) and (max-width: 1024px) {
		/* .header {
			padding: var(--spacing-tablet) 0;
		} */
		
		.nav-list {
			gap: var(--spacing-tablet);
		}
		
		.nav-link {
			font-size: var(--font-size-base);
		}
		
		.nav-cta {
			padding: 12px 20px;
			font-size: var(--font-size-sm);
		}
	}
	
	@media (max-width: 768px) {
		.header {
			padding: var(--spacing-xs) 0;
		}
		
		.header .container {
			padding: 0;
			margin: 0;
			max-width: 100%;
			width: 100%;
		}
		
		.navbar {
			flex-direction: row;
			align-items: center;
			justify-content: space-between;
			gap: var(--spacing-xs);
			width: 100%;
			padding: 0 var(--spacing-xs);
		}
		
		.nav-brand {
			flex: 0 0 auto;
		}
		
		.logo-img {
			height: 40px;
		}
		
		.nav-menu {
			flex: 1;
			flex-direction: row;
			align-items: center;
			justify-content: center;
			gap: 0;
		}
		
		.nav-list {
			display: flex;
			flex-direction: row;
			gap: 0.5rem;
			justify-content: center;
			flex-wrap: nowrap;
			margin: 0;
			padding: 0;
		}
		
		.nav-link {
			flex-direction: column;
			gap: var(--spacing-xs);
			padding: var(--spacing-xs);
			min-width: 40px;
			text-align: center;
			max-width: 50px;
		}
		
		.nav-link .icon {
			font-size: 1.2rem;
			color: #2566cf;
		}
		
		.nav-link:hover .icon {
			color: #1d96d5;
		}
		
		.nav-text {
			display: none;
		}
		
		.nav-actions {
			flex: 0 0 auto;
			display: flex;
			flex-direction: row;
			gap: var(--spacing-xs);
			align-items: center;
		}
		
		.nav-cta {
			padding: var(--spacing-xs) var(--spacing-sm);
			font-size: var(--font-size-xs);
			border-radius: var(--radius-lg);
		}
		
		.nav-cta .nav-text {
			display: none;
		}
		
		.nav-cta .icon {
			font-size: 1.1rem;
		}
		
		.options-menu {
			order: 1;
		}
		
		.options-dropdown {
			right: 0;
			min-width: 200px;
		}
	}
	
	/* Extra small screens */
	@media (max-width: 480px) {
		.navbar {
			padding: 0 var(--spacing-xs);
		}
		
		.logo-img {
			height: 35px;
		}
		
		.nav-list {
			gap: var(--spacing-md);
		}
		
		.nav-link {
			min-width: 35px;
			max-width: 45px;
			padding: var(--spacing-xs);
		}
		
		.nav-link .icon {
			font-size: 1.1rem;
		}
		
		.nav-cta {
			padding: var(--spacing-xs);
		}
		
		.nav-cta .icon {
			font-size: 1rem;
		}
	}
			min-width: 200px;
		}
			font-size: var(--font-size-xs);
		}
		
		.nav-cta .nav-text {
			display: none;
		}
		
		.nav-cta .icon {
			font-size: var(--font-size-lg);
		}
		}
		
		.language-switcher {
			order: 1;
		}
		
		.nav-list {
			overflow-x: auto;
			flex-wrap: nowrap;
			gap: var(--spacing-md);
			padding: 0 var(--spacing-sm);
			scrollbar-width: none; /* Firefox */
			-ms-overflow-style: none; /* IE/Edge */
		}
		
		.nav-list::-webkit-scrollbar {
			display: none; /* Chrome/Safari */
		}
		
		.nav-item {
			flex: 0 0 auto;
			white-space: nowrap;
		}
		
		.nav-cta {
			order: 2;
			font-size: var(--font-size-xs);
			padding: var(--spacing-xs) var(--spacing-sm);
		}

		/* Options menu mobile adjustments */
		.options-dropdown {
			right: -10px;
			min-width: 180px;
		}

		.options-item {
			padding: var(--spacing-xs);
		}

		.option-label {
			font-size: var(--font-size-xs);
		}

		.options-item .lang-select {
			min-width: 70px;
			font-size: var(--font-size-xs);
		}

		.options-item .theme-toggle {
			min-width: 35px;
			height: 28px;
		}
	}
</style>

<script>
	// Header hide/show on scroll
	let lastScrollTop = 0;
	const header = document.querySelector('.header');
	const scrollThreshold = 100; // Minimum scroll distance before hiding header
	
	function handleScroll() {
		const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
		
		// Don't hide header if we're at the very top
		if (scrollTop <= scrollThreshold) {
			header?.classList.remove('header-hidden');
			return;
		}
		
		// Hide header when scrolling down, show when scrolling up
		if (scrollTop > lastScrollTop) {
			// Scrolling down
			header?.classList.add('header-hidden');
		} else {
			// Scrolling up
			header?.classList.remove('header-hidden');
		}
		
		lastScrollTop = scrollTop;
	}
	
	// Throttle scroll events for better performance
	let ticking = false;
	function throttledScroll() {
		if (!ticking) {
			requestAnimationFrame(() => {
				handleScroll();
				ticking = false;
			});
			ticking = true;
		}
	}
	
	window.addEventListener('scroll', throttledScroll);
	
	// Language switcher functionality
	const languageSelect = document.getElementById('language-select') as HTMLSelectElement;
	if (languageSelect) {
		languageSelect.addEventListener('change', (e) => {
			const target = e.target as HTMLSelectElement;
			const newUrl = target.value;
			if (newUrl) {
				// Use View Transitions API if available for smoother language switch
				if ('startViewTransition' in document) {
					(document as any).startViewTransition(() => {
						// Preload the new page before navigating
						const link = document.createElement('link');
						link.rel = 'prefetch';
						link.href = newUrl;
						document.head.appendChild(link);
						
						// Navigate after a short delay to allow prefetch
						setTimeout(() => {
							window.location.href = newUrl;
						}, 50);
					});
				} else {
					// Fallback to normal navigation
					window.location.href = newUrl;
				}
			}
		});
	}
	
	// Options menu functionality
	const optionsToggle = document.querySelector('.options-toggle') as HTMLButtonElement;
	const optionsMenu = document.querySelector('.options-menu') as HTMLElement;
	const optionsDropdown = document.querySelector('.options-dropdown') as HTMLElement;
	
	if (optionsToggle && optionsMenu && optionsDropdown) {
		// Toggle options menu
		optionsToggle.addEventListener('click', (e) => {
			e.stopPropagation();
			const isActive = optionsMenu.classList.toggle('active');
			
			// Update ARIA attributes
			optionsToggle.setAttribute('aria-expanded', isActive.toString());
			
			// Focus management
			if (isActive) {
				const firstFocusable = optionsDropdown.querySelector('button, select') as HTMLElement;
				firstFocusable?.focus();
			}
		});
		
		// Keyboard navigation for options menu
		optionsDropdown.addEventListener('keydown', (e) => {
			const focusableElements = optionsDropdown.querySelectorAll('button, select') as NodeListOf<HTMLElement>;
			const focusedIndex = Array.from(focusableElements).indexOf(document.activeElement as HTMLElement);
			
			switch (e.key) {
				case 'ArrowDown':
					e.preventDefault();
					const nextIndex = (focusedIndex + 1) % focusableElements.length;
					focusableElements[nextIndex]?.focus();
					break;
				case 'ArrowUp':
					e.preventDefault();
					const prevIndex = (focusedIndex - 1 + focusableElements.length) % focusableElements.length;
					focusableElements[prevIndex]?.focus();
					break;
				case 'Tab':
					// Allow normal tab behavior but close menu when tabbing out
					if (e.shiftKey && focusedIndex === 0) {
						// Shift+Tab from first element
						closeOptionsMenu();
					} else if (!e.shiftKey && focusedIndex === focusableElements.length - 1) {
						// Tab from last element
						closeOptionsMenu();
					}
					break;
			}
		});
		
		// Close options menu when clicking outside
		document.addEventListener('click', (e) => {
			if (!optionsMenu.contains(e.target as Node)) {
				closeOptionsMenu();
			}
		});
		
		// Close options menu when pressing Escape
		document.addEventListener('keydown', (e) => {
			if (e.key === 'Escape' && optionsMenu.classList.contains('active')) {
				closeOptionsMenu();
				optionsToggle.focus(); // Return focus to toggle button
			}
		});
		
		function closeOptionsMenu() {
			optionsMenu.classList.remove('active');
			optionsToggle.setAttribute('aria-expanded', 'false');
		}
	}
	
	// Theme toggle functionality
	const themeToggle = document.querySelector('.theme-toggle') as HTMLButtonElement;
	const themeIcon = document.querySelector('.theme-icon') as HTMLElement;
	
	if (themeToggle && themeIcon) {
		// Check for saved theme or default to light
		const savedTheme = localStorage.getItem('theme') || 'light';
		document.documentElement.setAttribute('data-theme', savedTheme);
		updateThemeIcon(savedTheme);
		
		themeToggle.addEventListener('click', () => {
			const currentTheme = document.documentElement.getAttribute('data-theme');
			const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
			
			document.documentElement.setAttribute('data-theme', newTheme);
			localStorage.setItem('theme', newTheme);
			updateThemeIcon(newTheme);
		});
	}
	
	function updateThemeIcon(theme: string) {
		if (themeIcon) {
			// Add a little rotation animation when changing themes
			themeIcon.style.transform = 'rotate(180deg) scale(0.8)';
			
			setTimeout(() => {
				themeIcon.textContent = theme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
				themeIcon.style.transform = 'rotate(0deg) scale(1)';
			}, 150);
		}
	}
	
	// Smooth scrolling for anchor links
	document.querySelectorAll('a[href^="#"]').forEach((anchor: Element) => {
		(anchor as HTMLAnchorElement).addEventListener('click', (e: Event) => {
			e.preventDefault();
			const href = (anchor as HTMLAnchorElement).getAttribute('href');
			if (href) {
				const target = document.querySelector(href);
				if (target) {
					target.scrollIntoView({
						behavior: 'smooth',
						block: 'start'
					});
				}
			}
		});
	});
</script>