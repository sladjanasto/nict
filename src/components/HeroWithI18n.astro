---
import { getUITranslations, getLangFromUrl } from '../utils/i18n.ts';

const { url } = Astro;
const lang = getLangFromUrl(url);
const ui = await getUITranslations(lang);

// Get localized hero questions from UI translations
const heroQuestions = ui.hero?.questions || [
	{
		questionStart: 'Ready for your',
		questionHighlight: 'digital transformation',
		questionEnd: '?',
		answerStart: 'We deliver innovative',
		service1: 'web development',
		service2: 'custom applications',
		answerMiddle: 'and',
		service3: 'digital solutions',
		answerEnd: 'that drive your business forward.'
	}
];
---

<section id="home" class="hero" transition:name="hero-section">
	<div class="container">
		<div class="hero-content">
			<div class="hero-text">
				<h1 class="hero-question typewriter" id="heroQuestion" transition:name="hero-title">
					<span id="questionStart">Ready for your</span> <br>
					<span class="highlight" id="questionHighlight">digital transformation</span>
					<span id="questionEnd">?</span>
				</h1>
				<p class="hero-answer" id="heroAnswer" transition:name="hero-description">
					<span class="answer-line typewriter-line-1" id="answerLine1">
						<span id="answerStart">We deliver innovative</span> 
						<span class="highlight" id="service1">web development</span>, 
						<span class="highlight" id="service2">custom applications</span>,
					</span>
					<br>
					<span class="answer-line typewriter-line-2" id="answerLine2">
						<span id="answerMiddle">and</span> 
						<span class="highlight" id="service3">digital solutions</span> 
						<span id="answerEnd">that drive your business forward.</span>
					</span>
				</p>
				
				
				<p class="hero-closing">{ui.hero?.closing || 'Ready to transform your digital presence?'}</p>
				
				<div class="hero-cta">
					<a href="#contact" class="btn-primary">
						{ui.buttons?.getStarted || 'Get Started Today'}
					</a>
					<a href="#services" class="btn-link btn-link-gradient">
						{ui.buttons?.learnMore || 'Learn More'}
						<i class="icon-arrow-right"></i>
					</a>
				</div>
			</div>
		</div>
	</div>
</section>

<style>
	.hero {
		background: var(--hero-bg, var(--bg-white));
		background-image: var(--hero-bg-image, url('/hero-bg-pattern.svg'));
		background-repeat: no-repeat;
		background-position: center center;
		background-size: cover;
		background-attachment: scroll;
		padding: 120px 0 var(--spacing-xxl);
		display: flex;
		align-items: center;
		position: relative;
		overflow: hidden;
		flex-direction: column;
		will-change: transform;
		transform: translateZ(0);
		transition: background-color var(--transition-normal), background-image var(--transition-normal);
	}
	
	.hero::before {
		content: '';
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background: rgba(255, 255, 255, 0.2);
		z-index: 1;
	}
	
	.hero-content {
		display: flex;
		justify-content: center;
		align-items: center;
		position: relative;
		z-index: 2;
		transform: translate(-20rem, 2rem);
		/* width: 1400px; */
		/* max-width: 900px;
		margin: 0 auto;
		padding: 0 500px 0 0; */
	}
	
	.hero-text {
		text-align: center;
		width: 100%;
		transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
	}

	/* Typewriter Animation */
	.typewriter {
		overflow: hidden;
		border-right: 3px solid var(--primary-color);
		white-space: nowrap;
		margin: 0 auto;
		animation: 
			typewriter 2s steps(40, end),
			blink-caret 0.75s step-end infinite,
			remove-caret 0.1s ease-in 2s forwards;
	}
	
	/* Disable typewriter animation on view transitions */
	.typewriter.no-animation {
		animation: none !important;
		border-right: none !important;
		overflow: visible;
		white-space: normal;
	}
	
	.typewriter-line-1 {
		display: inline-block;
		overflow: hidden;
		border-right: 2px solid var(--primary-color);
		white-space: nowrap;
		animation: 
			typewriter-line1 2.5s steps(50, end) 0.5s both,
			blink-caret 0.75s step-end infinite 0.5s,
			remove-caret 0.1s ease-in 3s forwards;
	}
	
	/* Disable animation for typewriter lines */
	.typewriter-line-1.no-animation,
	.typewriter-line-2.no-animation {
		animation: none !important;
		border-right: none !important;
		overflow: visible;
		white-space: normal;
		opacity: 1 !important;
		width: auto !important;
	}
	
	.typewriter-line-2 {
		display: inline-block;
		overflow: hidden;
		border-right: 2px solid var(--primary-color);
		white-space: nowrap;
		opacity: 0;
		animation: 
			show-line 0.1s ease-in 3s forwards,
			typewriter-line2 2s steps(40, end) 3.1s both,
			blink-caret 0.75s step-end infinite 3.1s,
			remove-caret 0.1s ease-in 5.1s forwards;
	}
	
	@keyframes typewriter {
		from { width: 0 }
		to { width: 100% }
	}
	
	@keyframes typewriter-line1 {
		from { width: 0 }
		to { width: 100% }
	}
	
	@keyframes typewriter-line2 {
		from { width: 0 }
		to { width: 100% }
	}
	
	@keyframes show-line {
		to { opacity: 1 }
	}
	
	@keyframes blink-caret {
		from, to { border-color: transparent }
		50% { border-color: var(--primary-color) }
	}
	
	@keyframes remove-caret {
		to { border-color: transparent }
	}
	
	.hero-question {
		font-family: var(--font-headings);
		font-size: 4rem;
		font-weight: 800;
		line-height: 1.2;
		color: var(--text-dark);
		margin-bottom: var(--spacing-lg);
		text-align: left;
		transition: opacity 0.5s ease-in-out, transform 0.4s ease-in-out;
		/* white-space: normal; */
	}
	
	.hero .highlight,
	.hero-question .highlight,
	.hero-answer .highlight {
		background: linear-gradient(45deg, #1aeae2, #6366f1) !important;
		-webkit-background-clip: text !important;
		-webkit-text-fill-color: transparent !important;
		background-clip: text !important;
		position: relative;
		color: transparent !important;
	}
	
	#questionStart,
	#questionHighlight,
	#questionEnd,
	#answerStart,
	#service1,
	#service2,
	#answerMiddle,
	#service3,
	#answerEnd {
		transition: opacity 0.4s ease-in-out;
	}
	
	.hero-answer {
		font-family: var(--font-primary);
		font-size: 1.5rem;
		color: var(--text-light);
		margin-bottom: var(--spacing-xl);
		line-height: 1.8;
		font-weight: 300;
		text-align: left;
		transition: opacity 0.5s ease-in-out, transform 0.4s ease-in-out;
	}
	
	.answer-line {
		display: inline-block;
		width: 100%;
		/* white-space: normal; */
	}
	
	
	.promise-title {
		font-family: var(--font-headings);
		font-size: 1.25rem;
		font-weight: 100;
		color: var(--text-dark);
		margin-bottom: var(--spacing-md);
		text-align: center;
		transition: opacity 0.4s ease-in-out;
	}
	
	.promise-items {
		display: flex;
		flex-direction: row;
		gap: var(--spacing-sm);
		margin-bottom: var(--spacing-lg);
		transition: all 0.4s ease-in-out;
	}
	
	.promise-item {
		display: flex;
		align-items: center;
		justify-content: center;
		font-family: var(--font-primary);
		font-weight: 300;
		color: var(--text-dark);
		text-align: left;
		transition: opacity 0.4s ease-in-out, transform 0.3s ease-in-out;
	}
	
	.promise-icon {
		color: var(--primary-color);
		font-size: 1.25rem;
		margin-right: var(--spacing-md);
		font-weight: 600;
		width: 20px;
		height: 20px;
		display: flex;
		align-items: center;
		justify-content: center;
	}
	
	.hero-closing {
		font-family: var(--font-headings);
		font-size: 1.5rem;
		font-weight: 200;
		color: var(--text-dark);
		text-align: left;
		margin: 0;
		font-style: italic;
		transition: opacity 0.4s ease-in-out;
	}
	
	.hero-cta {
		display: flex;
		gap: var(--spacing-lg);
		flex-wrap: wrap;
		margin-top: var(--spacing-xl);
		align-items: center;
		justify-content: flex-start;
	}
	
	.btn-primary {
		background: var(--bg-gradient);
		padding: var(--spacing-md) var(--spacing-xl);
		border-radius: var(--radius-md);
		text-decoration: none;
		color: var(--text-white);
		font-weight: 600;
		transition: transform var(--transition-normal), box-shadow var(--transition-normal);
		box-sizing: border-box;
	}
	
	.btn-primary:hover {
		transform: translateY(-2px);
		box-shadow: var(--shadow-lg);
	}
	
	.btn-secondary {
		background: transparent;
		border: 2px solid var(--primary-color);
		color: var(--primary-color);
		padding: var(--spacing-md) var(--spacing-xl);
		border-radius: var(--radius-md);
		text-decoration: none;
		font-weight: 600;
		transition: all var(--transition-normal);
	}
	
	.btn-secondary:hover {
		background: var(--primary-color);
		color: var(--text-white);
		transform: translateY(-2px);
	}
	@media (max-width: 1400px) {
		.hero-content {
			transform: translate(0rem, 2rem);
		}
	}
	
	@media (min-width: 769px) and (max-width: 1024px) {
			.hero-content {
			padding: 0;
			width: 769px;
		}
	}
	
	@media (max-width: 768px) {
		.hero {
			padding: 80px 0 var(--spacing-xxl);
			min-height: auto;
		}
		
		.container {
			padding: 0 var(--spacing-md);
		}
		
		.hero-content {
			padding: 0;
			width: 300px;
		}
		
		.hero-text {
			text-align: center;
		}
		
		.hero-question {
			font-size: 2rem;
			line-height: 1.2;
			margin-bottom: var(--spacing-lg);
		}
		
		/* Mobile responsive typewriter - using reveal animations instead of width */
		.hero-question.typewriter {
			white-space: normal;
			overflow: visible;
			border-right: none !important;
			animation: 
				mobile-reveal 1.5s ease-out;
		}
		
		.typewriter-line-1 {
			white-space: normal;
			overflow: visible;
			border-right: none !important;
			opacity: 0;
			animation: 
				mobile-line-reveal 1.8s ease-out 0.5s both;
		}
		
		.typewriter-line-2 {
			white-space: normal;
			overflow: visible;
			border-right: none !important;
			opacity: 0;
			animation: 
				mobile-line-reveal 1.5s ease-out 2.5s both;
		}
		
		/* Mobile-specific reveal animations */
		@keyframes mobile-reveal {
			0% { 
				opacity: 0;
				transform: translateY(20px) scale(0.95);
			}
			60% {
				opacity: 0.8;
				transform: translateY(5px) scale(0.98);
			}
			100% { 
				opacity: 1;
				transform: translateY(0) scale(1);
			}
		}
		
		@keyframes mobile-line-reveal {
			0% { 
				opacity: 0;
				transform: translateX(-30px);
				filter: blur(3px);
			}
			40% {
				opacity: 0.6;
				transform: translateX(-5px);
				filter: blur(1px);
			}
			100% { 
				opacity: 1;
				transform: translateX(0);
				filter: blur(0);
			}
		}
		
		.hero-answer {
			font-size: 1.1rem;
			line-height: 1.5;
			margin-bottom: var(--spacing-lg);
		}
		
		/* Mobile answer lines styling */
		.answer-line {
			display: block;
			width: 100%;
			margin-bottom: var(--spacing-xs);
		}
		
		.answer-line br {
			display: none;
		}
		
		.promise-title {
			font-size: var(--font-size-lg);
			margin-bottom: var(--spacing-md);
		}
		
		.promise-items {
			gap: var(--spacing-sm);
		}
		
		.promise-item {
			justify-content: flex-start;
			text-align: left;
			font-size: var(--font-size-sm);
		}
		
		.hero-closing {
			font-size: var(--font-size-md);
			margin-top: var(--spacing-md);
		}
		
		.hero-cta {
			flex-direction: column;
			gap: var(--spacing-md);
			margin-top: var(--spacing-lg);
		}
		
		.btn-primary,
		.btn-secondary {
			width: 100%;
			max-width: 280px;
			padding: var(--spacing-sm) var(--spacing-lg);
			font-size: var(--font-size-sm);
		}
	}
</style>

<script define:vars={{ heroQuestions }}>
	let isInitialized = false;
	
	function initializeHero() {
		// Prevent multiple initialization
		if (isInitialized) {
			return;
		}
		
		const questions = heroQuestions;
		let currentIndex = Math.floor(Math.random() * questions.length);
		
		function updateContent() {
			const question = questions[currentIndex];
			
			// Update content without triggering animations
			const questionStart = document.getElementById('questionStart');
			const questionHighlight = document.getElementById('questionHighlight');
			const questionEnd = document.getElementById('questionEnd');
			const answerStart = document.getElementById('answerStart');
			const service1 = document.getElementById('service1');
			const service2 = document.getElementById('service2');
			const answerMiddle = document.getElementById('answerMiddle');
			const service3 = document.getElementById('service3');
			const answerEnd = document.getElementById('answerEnd');
			
			if (questionStart) questionStart.textContent = question.questionStart;
			if (questionHighlight) questionHighlight.textContent = question.questionHighlight;
			if (questionEnd) questionEnd.textContent = question.questionEnd;
			if (answerStart) answerStart.textContent = question.answerStart;
			if (service1) service1.textContent = question.service1;
			if (service2) service2.textContent = question.service2;
			if (answerMiddle) answerMiddle.textContent = question.answerMiddle;
			if (service3) service3.textContent = question.service3;
			if (answerEnd) answerEnd.textContent = question.answerEnd;
		}
		
		function nextQuestion() {
			currentIndex = (currentIndex + 1) % questions.length;
			updateContent();
		}
		
		// Initialize with first question
		updateContent();
		
		// Auto-rotate every 2 minutes (120000ms)
		setInterval(nextQuestion, 120000);
		
		// Change question when user returns to tab
		document.addEventListener('visibilitychange', () => {
			if (!document.hidden) {
				nextQuestion();
			}
		});
		
		isInitialized = true;
	}
	
	// Disable typewriter animations on view transitions
	function disableTypewriterAnimations() {
		const typewriterElements = document.querySelectorAll('.typewriter, .typewriter-line-1, .typewriter-line-2');
		typewriterElements.forEach(element => {
			element.classList.add('no-animation');
		});
	}
	
	// Re-enable typewriter animations for initial page load only
	function enableTypewriterAnimations() {
		const typewriterElements = document.querySelectorAll('.typewriter, .typewriter-line-1, .typewriter-line-2');
		typewriterElements.forEach(element => {
			element.classList.remove('no-animation');
		});
	}
	
	// Reset on page change to allow re-initialization
	document.addEventListener('astro:before-preparation', () => {
		isInitialized = false;
	});
	
	// Disable animations before view transitions
	document.addEventListener('astro:before-preparation', disableTypewriterAnimations);
	
	// Initialize on both standard page load and Astro page transitions
	document.addEventListener('DOMContentLoaded', () => {
		enableTypewriterAnimations(); // Only enable animations on fresh page load
		initializeHero();
	});
	
	document.addEventListener('astro:page-load', () => {
		disableTypewriterAnimations(); // Keep animations disabled for view transitions
		initializeHero();
	});
</script>
