---
import { getUITranslations, getLangFromUrl, getPageContent } from '../utils/i18n.ts';

const { url } = Astro;
const lang = getLangFromUrl(url);
const ui = await getUITranslations(lang);
const servicesContent = await getPageContent(lang, 'services');

// Fallback content if markdown content is not available
const content = servicesContent ? await servicesContent.render() : null;

// Extract data to avoid complex expressions in template
const servicesData = ui.services || {};
const interimFeatures = servicesData.interimManagement?.features || [];
const interimBenefits = servicesData.interimManagement?.benefits || [];
const cloudFeatures = servicesData.cloudMigration?.features || [];
const cloudBenefits = servicesData.cloudMigration?.benefits || [];
const itFeatures = servicesData.itOperations?.features || [];
const itBenefits = servicesData.itOperations?.benefits || [];
const aiFeatures = servicesData.aiConsulting?.features || [];
const aiBenefits = servicesData.aiConsulting?.benefits || [];
const seoFeatures = servicesData.seoServices?.features || [];
const seoBenefits = servicesData.seoServices?.benefits || [];
---

<section id="services" class="services section">
	<div class="services-container">
		<h2 class="section-title">{ui.services.title}</h2>
		
		<div class="services-intro">
			<p class="intro-text">{ui.services.subtitle}</p>
		</div>
		
		{servicesContent && (
			<div class="services-markdown">
				<Fragment set:html={content?.Content} />
			</div>
		)}
		
		<div class="services-grid">
			<!-- Service Card 1: Interim Management -->
			<div class="service-card">
				<div class="service-header">
					<h3>{ui.services.interimManagement.title}</h3>
					<p class="service-description">{ui.services.interimManagement.description}</p>
				</div>
				
				<div class="service-details">
					<div class="service-features">
						<h4>{ui.services.keyFeatures}</h4>
						<ul>
							{interimFeatures.map((feature: string) => (
								<li>{feature}</li>
							))}
						</ul>
					</div>
					
					<div class="service-benefits">
						<h4>{ui.services.benefits}</h4>
						<ul>
							{interimBenefits.map((benefit: string) => (
								<li>{benefit}</li>
							))}
						</ul>
					</div>
				</div>
				
				<div class="service-cta">
					<button class="btn-link service-explore-btn" data-service="interim" data-title="{ui.services.interimManagement.title}">
						<span class="toggle-text-show">{ui.services.explorePackages}</span>
						<span class="toggle-text-hide" style="display: none;">{ui.services.hideExplorePackages}</span>
						<i class="icon icon-arrow-down"></i>
					</button>
				</div>
			</div>
			
			<!-- Service Card 2: Cloud Migration -->
			<div class="service-card">
				<div class="service-header">
					<h3>{ui.services.cloudMigration.title}</h3>
					<p class="service-description">{ui.services.cloudMigration.description}</p>
				</div>
				
				<div class="service-details">
					<div class="service-features">
						<h4>{ui.services.keyFeatures}</h4>
						<ul>
							{cloudFeatures.map((feature: string) => (
								<li>{feature}</li>
							))}
						</ul>
					</div>
					
					<div class="service-benefits">
						<h4>{ui.services.benefits}</h4>
						<ul>
							{cloudBenefits.map((benefit: string) => (
								<li>{benefit}</li>
							))}
						</ul>
					</div>
				</div>
				
				<div class="service-cta">
					<button class="btn-link service-explore-btn" data-service="cloud" data-title="{ui.services.cloudMigration.title}">
						<span class="toggle-text-show">{ui.services.explorePackages}</span>
						<span class="toggle-text-hide" style="display: none;">{ui.services.hideExplorePackages}</span>
						<i class="icon icon-arrow-down"></i>
					</button>
				</div>
			</div>
			
			<!-- Service Card 3: IT Operations -->
			<div class="service-card">
				<div class="service-header">
					<h3>{ui.services.itOperations.title}</h3>
					<p class="service-description">{ui.services.itOperations.description}</p>
				</div>
				
				<div class="service-details">
					<div class="service-features">
						<h4>{ui.services.keyFeatures}</h4>
						<ul>
							{itFeatures.map((feature: string) => (
								<li>{feature}</li>
							))}
						</ul>
					</div>
					
					<div class="service-benefits">
						<h4>{ui.services.benefits}</h4>
						<ul>
							{itBenefits.map((benefit: string) => (
								<li>{benefit}</li>
							))}
						</ul>
					</div>
				</div>
				
				<div class="service-cta">
					<button class="btn-link service-explore-btn" data-service="it" data-title="{ui.services.itOperations.title}">
						<span class="toggle-text-show">{ui.services.explorePackages}</span>
						<span class="toggle-text-hide" style="display: none;">{ui.services.hideExplorePackages}</span>
						<i class="icon icon-arrow-down"></i>
					</button>
				</div>
			</div>
			
			<!-- Service Card 4: AI Consulting -->
			<div class="service-card">
				<div class="service-header">
					<h3>{ui.services.aiConsulting.title}</h3>
					<p class="service-description">{ui.services.aiConsulting.description}</p>
				</div>
				
				<div class="service-details">
					<div class="service-features">
						<h4>{ui.services.keyFeatures}</h4>
						<ul>
							{aiFeatures.map((feature: string) => (
								<li>{feature}</li>
							))}
						</ul>
					</div>
					
					<div class="service-benefits">
						<h4>{ui.services.benefits}</h4>
						<ul>
							{aiBenefits.map((benefit: string) => (
								<li>{benefit}</li>
							))}
						</ul>
					</div>
				</div>
				
				<div class="service-cta">
					<button class="btn-link service-explore-btn" data-service="ai" data-title="{ui.services.aiConsulting.title}">
						<span class="toggle-text-show">{ui.services.explorePackages}</span>
						<span class="toggle-text-hide" style="display: none;">{ui.services.hideExplorePackages}</span>
						<i class="icon icon-arrow-down"></i>
					</button>
				</div>
			</div>
			
			<!-- Service Card 5: SEO Services -->
			<div class="service-card">
				<div class="service-header">
					<h3>{ui.services.seoServices.title}</h3>
					<p class="service-description">{ui.services.seoServices.description}</p>
				</div>
				
				<div class="service-details">
					<div class="service-features">
						<h4>{ui.services.keyFeatures}</h4>
						<ul>
							{seoFeatures.map((feature: string) => (
								<li>{feature}</li>
							))}
						</ul>
					</div>
					
					<div class="service-benefits">
						<h4>{ui.services.benefits}</h4>
						<ul>
							{seoBenefits.map((benefit: string) => (
								<li>{benefit}</li>
							))}
						</ul>
					</div>
				</div>
				
				<div class="service-cta">
					<button class="btn-link service-explore-btn" data-service="seo" data-title="{ui.services.seoServices.title}">
						<span class="toggle-text-show">{ui.services.explorePackages}</span>
						<span class="toggle-text-hide" style="display: none;">{ui.services.hideExplorePackages}</span>
						<i class="icon icon-arrow-down"></i>
					</button>
				</div>
			</div>
		</div>
		
		<!-- Service Packages Section -->
		<div id="packagesSection" class="packages-section packages-hidden">
			<div class="packages-container">
				<h3 id="packagesTitle" class="packages-title">Service Packages</h3>
				<div id="packagesContent" class="packages-content">
					<!-- Packages will be dynamically loaded here -->
					<div class="packages-placeholder">
						<p>Loading packages...</p>
					</div>
				</div>
			</div>
		</div>

	</div>
</section>

<style>
	.services {
		background: var(--bg-secondary);
	}
	
	.services-container {
		width: 100%;
		padding: 0;
	}
	
	.services-intro {
		margin-bottom: 60px;
		text-align: center;
	}
	
	.intro-text {
		font-size: var(--font-size-lg);
		color: var(--text-light);
		max-width: 800px;
		margin: 0 auto;
		line-height: 1.6;
		font-weight:100;
	}
	
	.services-markdown {
		margin-bottom: 40px;
		text-align: center;
	}
	
	.services-markdown :global(h2),
	.services-markdown :global(h3) {
		color: var(--text-primary);
		margin-bottom: 16px;
	}
	
	.services-markdown :global(p) {
		color: var(--text-light);
		line-height: 1.6;
		margin-bottom: 16px;
	}
	
	.service-details {
		/* margin-bottom: 25px; */
		flex-grow: 1;
		display: flex;
		gap: var(--gap);
	}
	
	.service-features,
	.service-benefits {
		margin-bottom: 20px;
		flex-grow: 1;
	}

	.service-features h4,
	.service-benefits h4 {
		color: var(--text-light);
		font-size: var(--font-size-md);
		margin-bottom: 12px;
		text-transform: uppercase;
		padding-bottom: 8px;
		text-align: center;
		font-weight: 300;
	}
	
	.service-features ul,
	.service-benefits ul {
		list-style: none;
		padding: 0;
		margin: 0;
	}
	
	.service-features li,
	.service-benefits li {
		padding: 6px 0;
		padding-left: 20px;
		position: relative;
		color: var(--text-light);
		line-height: 1.4;
		font-size: var(--font-size-sm);
		display:flex;
		align-items: center;
	}
	
	.service-features li::before,
	.service-benefits li::before {
		content: "âœ“";
		position: absolute;
		left: 0;
		color: var(--primary-color);
		font-weight: bold;
		font-size: 14px;
	}
	
	.service-cta {
		text-align: center;
		margin-top: auto;
		/* padding-top: 20px; */
	}
	
	.service-cta .btn:not(.btn-link) {
		font-size: var(--font-size-sm);
		padding: 12px 24px;
		width: 100%;
	}
	
	.services-grid {
		display: grid;
		grid-template-columns: repeat(5, 1fr);
		width: 100%;
		box-sizing: border-box;
		padding: 0 2rem 0.1rem;
		
	}

	/* Service Cards */
	.service-card {
		background: var(--bg-secondary);
		padding: 25px;
		display: flex;
		flex-direction: column;
		height: 100%;
		min-height: 400px;
		box-sizing: border-box;
		transition: all 0.3s ease;
		position: relative;
		/* min-height:122px; */
	}
	.service-card::after{
		position: absolute;
		content:'';
		width:2px;
		height:60%;
		background-color: var(--bg-primary);
		transform: translate(-1.5rem, 2.5rem);
	}

	/* Alternating background colors for cards */
	/* .service-card:nth-child(even) {
		background: var(--bg-secondary);
	}

	.service-card:nth-child(odd) {
		background: var(--bg-primary);
	} */

	.service-card:hover {
		transform: translateY(-2px);
		box-shadow: var(--shadow-lg);
	}

	.service-header {
		text-align: center;
		margin-bottom: 25px;
		min-height:122px;
	}
	/* Responsive Design */
	@media (max-width: 1400px) {
		.services-grid {
			grid-template-columns: repeat(4, 1fr);
			gap: 18px;
		}
	}

	@media (max-width: 1200px) {
		.services-grid {
			grid-template-columns: repeat(3, 1fr);
			gap: 20px;
		}
	}

	@media (max-width: 900px) {
		.services-grid {
			grid-template-columns: repeat(2, 1fr);
			gap: 20px;
		}
		
		.service-card {
			padding: 20px;
			min-height: 350px;
		}
	}

	@media (max-width: 768px) {
		.services-grid {
			grid-template-columns: 1fr;
			gap: 0px;
			padding:0;
		}
		
		.service-card {
			padding: 20px;
			min-height: 300px;
		}
	}

	.service-card h3 {
		color: var(--text-dark);
		font-size: var(--font-size-xl);
		margin-bottom: 15px;
		font-weight: 300;
		line-height: 1.3;
		text-transform: uppercase;
	}

	.service-description {
		color: var(--text-dark);
		font-size: var(--font-size-md);
		line-height: 1.5;
		margin-bottom: 0;
		font-weight:600;
	}

		
		.service-card {
			padding: 25px 20px;
		}
		
		.service-card h3 {
			font-size: var(--font-size-lg);
		}
		
		.service-description {
			font-size: var(--font-size-sm);
		}
	}
	
	.packages-toggle {
		text-align: center;
		margin-top: var(--spacing-3xl);
		padding-top: var(--spacing-xl);
		border-top: 1px solid var(--border-light);
	}
	
	.packages-toggle .btn:not(.btn-link),
	.packages-toggle-btn:not(.btn-link) {
		background: var(--bg-gradient);
		color: white;
		border: none;
		font-weight: 600;
		transition: all var(--transition-normal);
		width: 100%;
	}
	
	.packages-toggle .btn:not(.btn-link):hover,
	.packages-toggle-btn:not(.btn-link):hover {
		transform: translateY(-2px);
		box-shadow: var(--shadow-lg);
	}
	
	/* Service Packages Section */
	.packages-section {
		margin-top: var(--spacing-xl);
		padding-top: var(--spacing-xl);
		border-top: 2px solid var(--border-light);
		transition: all 0.4s ease-in-out;
		overflow: hidden;
	}
	
	.packages-section.packages-hidden {
		max-height: 0;
		opacity: 0;
		margin-top: 0;
		padding-top: 0;
		border-top: none;
	}
	
	.packages-section.packages-visible {
		max-height: 2000px;
		opacity: 1;
		animation: slideInFromTop 0.4s ease-out;
	}
	
	@keyframes slideInFromTop {
		from {
			transform: translateY(-20px);
			opacity: 0;
		}
		to {
			transform: translateY(0);
			opacity: 1;
		}
	}
	
	.packages-container {
		max-width: 1200px;
		margin: 0 auto;
		padding: 0 2rem;
	}
	
	.packages-title {
		color: var(--text-dark);
		font-size: var(--font-size-2xl);
		text-align: center;
		margin-bottom: var(--spacing-xl);
		font-weight: 700;
	}
	
	.packages-content {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
		gap: var(--spacing-lg);
		margin-bottom: var(--spacing-xl);
		max-width: 1200px;
		margin-left: auto;
		margin-right: auto;
	}
	
	@media (max-width: 768px) {
		.packages-content {
			grid-template-columns: 1fr;
			gap: var(--spacing-md);
		}
	}
	
	@media (min-width: 769px) and (max-width: 1024px) {
		.packages-content {
			grid-template-columns: repeat(2, 1fr);
		}
	}
	
	@media (min-width: 1025px) {
		.packages-content {
			grid-template-columns: repeat(3, 1fr);
		}
	}
	
	.packages-placeholder {
		grid-column: 1 / -1;
		text-align: center;
		padding: var(--spacing-xl);
		color: var(--text-light);
		font-style: italic;
	}
	
	/* Package Card Styles (Microsoft Copilot style) */
	.package-card {
		background: var(--bg-primary);
		border-radius: var(--radius-lg);
		padding: var(--spacing-xl);
		box-shadow: var(--shadow-md);
		transition: all var(--transition-normal);
		border: 2px solid transparent;
		position: relative;
		display: flex;
		flex-direction: column;
		min-height: 500px;
	}
	
	.package-card:hover {
		transform: translateY(-4px);
		box-shadow: var(--shadow-lg);
		border-color: var(--primary-color);
	}
	
	.package-card.popular {
		border-color: var(--primary-color);
		background: linear-gradient(135deg, var(--bg-primary) 0%, rgba(26, 234, 226, 0.05) 100%);
	}
	
	.popular-badge {
		position: absolute;
		top: -12px;
		left: 50%;
		transform: translateX(-50%);
		background: var(--bg-gradient);
		color: white;
		padding: 6px 20px;
		border-radius: 20px;
		font-size: var(--font-size-xs);
		font-weight: 600;
		text-transform: uppercase;
		letter-spacing: 0.5px;
	}
	
	.package-header {
		text-align: center;
		margin-bottom: var(--spacing-lg);
		flex-shrink: 0;
	}
	
	.package-name {
		color: var(--text-dark);
		font-size: var(--font-size-xl);
		font-weight: 700;
		margin-bottom: var(--spacing-xs);
		line-height: 1.2;
	}
	
	.package-subtitle {
		color: var(--text-light);
		font-size: var(--font-size-sm);
		margin-bottom: var(--spacing-md);
		font-weight: 400;
	}
	
	.package-pricing {
		margin-bottom: var(--spacing-lg);
	}
	
	.package-price {
		color: var(--primary-color);
		font-size: 3rem;
		font-weight: 800;
		line-height: 1;
		display: inline-block;
	}
	
	.package-period {
		color: var(--text-light);
		font-size: var(--font-size-lg);
		font-weight: 400;
		margin-left: 4px;
	}
	
	.package-features {
		list-style: none;
		padding: 0;
		margin: 0;
		margin-bottom: var(--spacing-lg);
		flex-grow: 1;
	}
	
	.package-features li {
		padding: var(--spacing-sm) 0;
		color: var(--text-dark);
		position: relative;
		padding-left: var(--spacing-lg);
		font-size: var(--font-size-sm);
		line-height: 1.5;
		display: flex;
		align-items: flex-start;
	}
	
	.package-features li::before {
		content: "âœ“";
		position: absolute;
		left: 0;
		top: var(--spacing-sm);
		color: var(--primary-color);
		font-weight: bold;
		font-size: 1rem;
	}
	
	.package-cta {
		text-align: center;
		margin-top: auto;
	}
	
	.package-cta .btn {
		width: 100%;
		padding: var(--spacing-md) var(--spacing-lg);
		font-weight: 600;
		text-transform: uppercase;
		letter-spacing: 0.5px;
		font-size: var(--font-size-sm);
	}
	
	.package-cta .btn-secondary {
		background: transparent;
		border: 2px solid var(--primary-color);
		color: var(--primary-color);
	}
	
	.package-cta .btn-secondary:hover {
		background: var(--primary-color);
		color: white;
	}
</style>

<script>
	document.addEventListener('DOMContentLoaded', function() {
		const exploreButtons = document.querySelectorAll('.service-explore-btn') as NodeListOf<HTMLButtonElement>;
		const packagesSection = document.getElementById('packagesSection') as HTMLElement;
		const packagesTitle = document.getElementById('packagesTitle') as HTMLElement;
		const packagesContent = document.getElementById('packagesContent') as HTMLElement;
		
		if (!packagesSection || !packagesTitle || !packagesContent) return;
		
		let currentActiveButton: HTMLButtonElement | null = null;
		
		// Service package data (placeholder for now)
		const servicePackages: Record<string, any> = {
			interim: {
				title: 'Interim Management Packages',
				packages: [
					{
						name: 'Strategic Package',
						price: 'â‚¬5,000',
						period: '/month',
						features: ['Strategic assessment', 'Team leadership', 'Monthly reporting', 'Risk management']
					},
					{
						name: 'Operational Package',
						price: 'â‚¬8,000',
						period: '/month',
						features: ['Full operational management', '24/7 support', 'Weekly reporting', 'Process optimization', 'Team restructuring']
					}
				]
			},
			cloud: {
				title: 'Cloud Migration Packages',
				packages: [
					{
						name: 'Migration Starter',
						price: 'â‚¬3,000',
						period: '/project',
						features: ['Basic migration plan', 'Data backup', 'Initial setup', 'Documentation']
					},
					{
						name: 'Enterprise Migration',
						price: 'â‚¬15,000',
						period: '/project',
						features: ['Complete migration', 'Security setup', 'Training & support', '24/7 monitoring', 'Compliance audit']
					}
				]
			},
			it: {
				title: 'IT Operations Packages',
				packages: [
					{
						name: 'Essential Support',
						price: 'â‚¬2,000',
						period: '/month',
						features: ['System monitoring', 'Basic maintenance', 'Email support', 'Monthly reports']
					},
					{
						name: 'Professional Support',
						price: 'â‚¬4,000',
						period: '/month',
						features: ['Advanced monitoring', 'Preventive maintenance', 'Phone & email support', 'Weekly reports', 'Priority response']
					}
				]
			},
			ai: {
				title: 'AI Consulting Packages',
				packages: [
					{
						name: 'AI Discovery',
						price: 'â‚¬2,500',
						period: '/project',
						features: ['AI readiness assessment', 'Strategy consultation', 'Implementation roadmap', 'ROI analysis']
					},
					{
						name: 'AI Implementation',
						price: 'â‚¬10,000',
						period: '/project',
						features: ['Full AI solution', 'Custom development', 'Training & support', 'Performance optimization', 'Ongoing maintenance']
					}
				]
			},
			seo: {
				title: 'SEO Services Packages',
				packages: [
					{
						name: 'SEO Starter',
						subtitle: 'Essential SEO',
						price: 'â‚¬299',
						period: '/month',
						popular: false,
						features: [
							'Keyword research & strategy',
							'On-page optimization',
							'Technical SEO audit',
							'Monthly progress reports',
							'Google Analytics setup',
							'Local SEO (if applicable)'
						]
					},
					{
						name: 'SEO Professional',
						subtitle: 'Advanced SEO',
						price: 'â‚¬599',
						period: '/month',
						popular: true,
						features: [
							'Everything in SEO Starter',
							'Content strategy & creation',
							'Link building campaigns',
							'Competitor analysis',
							'Weekly progress reports',
							'Social media integration',
							'Schema markup implementation',
							'Priority support'
						]
					},
					{
						name: 'SEO Enterprise',
						subtitle: 'Complete SEO',
						price: 'â‚¬999',
						period: '/month',
						popular: false,
						features: [
							'Everything in SEO Professional',
							'E-commerce SEO optimization',
							'Multi-language SEO',
							'Advanced technical audits',
							'Custom reporting dashboard',
							'Dedicated SEO specialist',
							'Conversion rate optimization',
							'24/7 monitoring & alerts'
						]
					}
				]
			}
		};
		
		function renderPackages(serviceKey: string) {
			const service = servicePackages[serviceKey];
			if (!service) return;
			
			packagesTitle.textContent = service.title;
			
			const packagesHTML = service.packages.map((pkg: any) => `
				<div class="package-card ${pkg.popular ? 'popular' : ''}">
					${pkg.popular ? '<div class="popular-badge">Most Popular</div>' : ''}
					<div class="package-header">
						<h4 class="package-name">${pkg.name}</h4>
						${pkg.subtitle ? `<p class="package-subtitle">${pkg.subtitle}</p>` : ''}
						<div class="package-pricing">
							<span class="package-price">${pkg.price}</span>
							${pkg.period ? `<span class="package-period">${pkg.period}</span>` : ''}
						</div>
					</div>
					<ul class="package-features">
						${pkg.features.map((feature: string) => `<li>${feature}</li>`).join('')}
					</ul>
					<div class="package-cta">
						<a href="#contact" class="btn ${pkg.popular ? 'btn-primary' : 'btn-primary'}">Get Started</a>
					</div>
				</div>
			`).join('');
			
			packagesContent.innerHTML = packagesHTML;
		}
		
		exploreButtons.forEach(button => {
			const toggleTextShow = button.querySelector('.toggle-text-show') as HTMLElement;
			const toggleTextHide = button.querySelector('.toggle-text-hide') as HTMLElement;
			const serviceKey = button.dataset.service;
			
			if (!toggleTextShow || !toggleTextHide || !serviceKey) return;
			
			button.addEventListener('click', function() {
				const isCurrentlyActive = button === currentActiveButton;
				
				// Reset all buttons first
				exploreButtons.forEach(btn => {
					const showText = btn.querySelector('.toggle-text-show') as HTMLElement;
					const hideText = btn.querySelector('.toggle-text-hide') as HTMLElement;
					if (showText && hideText) {
						showText.style.display = 'inline';
						hideText.style.display = 'none';
					}
					btn.classList.remove('expanded');
				});
				
				if (isCurrentlyActive) {
					// Hide packages section
					packagesSection.classList.remove('packages-visible');
					packagesSection.classList.add('packages-hidden');
					currentActiveButton = null;
					
					// Scroll back to services section
					const servicesSection = document.getElementById('services');
					if (servicesSection) {
						servicesSection.scrollIntoView({ 
							behavior: 'smooth', 
							block: 'center' 
						});
					}
				} else {
					// Show packages for this service
					renderPackages(serviceKey);
					packagesSection.classList.remove('packages-hidden');
					packagesSection.classList.add('packages-visible');
					
					// Update button state
					toggleTextShow.style.display = 'none';
					toggleTextHide.style.display = 'inline';
					button.classList.add('expanded');
					currentActiveButton = button;
					
					// Smooth scroll to packages section
					setTimeout(() => {
						packagesSection.scrollIntoView({ 
							behavior: 'smooth', 
							block: 'start' 
						});
					}, 300);
				}
			});
		});
	});
</script>

